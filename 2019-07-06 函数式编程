纯函数，科里化，无副作用
这些不是函数式开发，仅仅只是函数式开发的前置条件
有这些不代表你用到了函数式，最多叫用到了函数式开发的思想
比如你用 Ramda 库，纯函数和无副作用自己保证，科里化也是最基本 api ：R.__

---------------------------------------------------------------------------

函数式编程（英语：functional programming）或称函数程序设计、泛函编程，是一种编程范式，它将电脑运算视为函数运算，并且避免使用程序状态以及易变对象。其中，λ演算（lambda calculus）为该语言最重要的基础。而且，λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。

------------------------------------------------------------------------

不可变性
函数式编程的中的函数，指的是数学函数，比如三角函数，带入参数就返回一个相同的值。
（函数式编程中的函数这个术语不是指计算机中的函数（实际上是Subroutine），而是指数学中的函数，即自变量的映射。
  也就是说一个函数的值仅决定于函数参数的值，不依赖其他状态。比如sqrt(x)函数计算x的平方根，只要x不变，不论什么时候调用，调用几次，值都是不变的。
  在函数式语言中，函数作为一等公民，可以在任何地方定义，在函数内或函数外，可以作为函数的参数和返回值，可以对函数进行组合。
  
  纯函数式编程语言中的变量也不是命令式编程语言中的变量，即存储状态的单元，而是代数中的变量，即一个值的名称。
  变量的值是不可变的（immutable），也就是说不允许像命令式编程语言中那样多次给一个变量赋值。
  比如说在命令式编程语言我们写“x = x + 1”，这依赖可变状态的事实，拿给程序员看说是对的，但拿给数学家看，却被认为这个等式为假。</p>）
  
----------------------------------------------------------------
纯函数，输入和输出一直是相同的，无副作用

3个原则：
    1.变量都只在函数作用域内获取, 作为的函数的参数传入
    2.不会产生副作用(side effects), 不会改变被传入的数据或者其他数据
    3.相同的输入保证相同的输出(same input -> same ouput)
---------------------------------------------------------------------------------------------
程序中的纯函数（pure function），指的是，
（1）这个函数对相同参数总是输出相同结果
（2）这个函数没有副作用（side effect）
因此，纯函数具有引用透明性。
