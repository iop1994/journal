ECMAScript中所有的函数的参数都是按值传递的。例如：
  let obj = {};
  function changeValue(obj){
    obj.name = 'ConardLi';
    obj = {name:'code秘密花园'};
  }
  changeValue(obj);
  console.log(obj.name); // ConardLi

NaN和其他任何类型比较永远返回false(包括和他自己)。例子：
  NaN == NaN // false
  
typeof
  适用场景
  typeof操作符可以准确判断一个变量的 原始类型 和 函数类型
    typeof 'ConardLi'  // string
    typeof 123  // number
    typeof true  // boolean
    typeof Symbol()  // symbol
    typeof undefined  // undefined
    typeof function(){}  // function
    
  不适用场景
   除函数外所有的引用类型都会被判定为object
      typeof [] // object
      typeof {} // object
      typeof new Date() // object
      typeof /^\d*$/; // object
  
  instanceof操作符可以帮助我们判断引用类型具体是什么类型的对象，但使用instanceof也不能检测基本数据类型
  
  每一个引用类型都有toString方法，默认情况下，toString()方法被每个Object对象继承。
      如果此方法在自定义对象中未被覆盖，toString() 返回 "[object type]"，其中type是对象的类型

this只有4种情景：
  1.纯粹的函数调用,this指向window
  2.对象方法调用,必须是a.b()或a [ "b" ]()这种形式调用，this指向对象
  3.构造函数调用，new Foo() 时，会自动生成一个空对象并返回，this指向这个新生成的空对象
  4.call,apply,bind，this可以随意指定。

