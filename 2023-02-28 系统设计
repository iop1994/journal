我刚刚做的事情是让整个系统更容易改变还是更难改变？
---------------------------------------------------

任何系统设计面试肯定会要求您为您尝试构建的任何系统提出基本的高级设计。有一些组件是肯定需要的。记下这些组件：

1、负载均衡器  
如果没有负载均衡器来在各个节点之间分配传入请求，就不可能拥有分布式系统。这确保了适当的资源利用，并且您的系统中没有单点故障。


2、缓存
大多数系统都有一些读取量大的交互，一些用户会经常访问但更新不多的信息。以无需数据库查找即可轻松获取的方式缓存此信息是有意义的。
考虑低延迟。此外，根据您的用例，您可能需要存储更频繁访问的信息或最近访问的信息。因此，请仔细阅读各种驱逐政策。


3、数据库
同样，没有某种形式的数据存储就没有系统。无论您是要存储文件、图像、产品信息、财务交易，还是只是转储来自各种用户交互的所有数据以供以后运行分析。
这一切都需要数据库。所以仔细阅读它。找出选择数据库时的重要因素，阅读SQL / NoSQL、查询模式，以及 CAP 定理如何在权衡取舍时发挥作用。


4、 消息队列
有时我们的系统需要执行一些需要完成但不一定立即完成的任务，或者它们的结果不会影响用户的旅程。
在这种情况下，与其进行服务调用并等待响应，不如将消息写入队列以便稍后执行。
如果您需要在数据库中插入信息，批量插入会更高效怎么办？只在消息队列中跟踪这些插入并执行 1 个批量插入而不是数百个 1 对 1 插入来优化您的资源是有意义的。


5、CDN
当您的用户分布在不同的地理位置时，在合理的时间内将您的内容提供给他们将成为一个真正的挑战。CDN 使我们能够在靠近用户位置的各种数据中心维护我们的数据副本，以减少延迟。


6、分析和监控
这是您创建的每个系统都需要的东西。这是一个隐藏的需求，没有人在需求收集中提出来，但每个面试官都想要这个。

用户登录还是注销？收藏了一件商品？支付失败？这是给我们的所有信息！任何重要的事情发生，触发一个事件并将其保存在您的消息队列中。

您可以对数据执行实时分析，或将其转储到Hadoop 集群中以备后用。



7、网络协议
根据您的要求，根据您共享的内容类型，您可能需要决定使用哪种网络协议。阅读各种网络协议以及它们何时相关，您可能需要做出哪些妥协等等。
第一步是了解所有这些概念。通过了解概念，我的意思不仅仅是关于这些是什么的一些理论知识，而是关于应该在什么时候使用什么的更实际的实践经验。
您需要了解以下内容：

给定用例，哪个是最好的选择。
在做出这些决定时，您需要考虑哪些权衡？
某些用例的最佳实践。
----------------------------------------------------------------------------------------------------------------------------------
系统设计是构建复杂应用程序的软件工程师的基本技能。它需要创造性和系统地思考如何解决问题的能力，以及有效实施解决方案的技术知识。在本文中，我们将回顾每个程序员都应该学习的前 10 个系统设计概念。

1. 可扩展性
可扩展性是系统在不牺牲性能的情况下处理增加的负载的能力。要设计可扩展的系统，您需要考虑数据分片、负载平衡和缓存等因素。

2. 可用性
可用性是系统在某些组件发生故障时仍能保持运行的能力。要设计一个可用的系统，您需要考虑冗余、故障转移和容错等因素。

3. 一致性
一致性是系统的属性，其中所有节点同时看到相同的数据。要实现一致性，需要考虑数据复制、分布式事务、冲突解决等因素。

4. 分区
分区是将数据分成更小、更易于管理的块的过程。要有效地分区数据，您需要考虑数据访问模式、数据分布和数据复制等因素。

5.缓存
缓存是将经常访问的数据存储在内存中以便更快访问的过程。要设计一个有效的缓存系统，您需要考虑缓存逐出策略、缓存一致性和缓存一致性等因素。

6.负载平衡
负载平衡是在多个服务器之间分配网络流量以避免过载的过程。要设计有效的负载均衡系统，您需要考虑服务器健康监控、负载均衡算法和会话持久性等因素。

7.微服务
微服务是一种将应用程序组织为松散耦合服务集合的方式。设计微服务架构，需要考虑服务边界、服务通信、服务发现等因素。

面向服务的体系结构 (SOA) 面向服务的体系结构是一种软件设计方法，其中将应用程序构建为服务的集合。设计面向服务的架构，需要考虑服务接口、服务契约、服务编排等因素。

9. 消息队列
消息队列是一种解耦应用程序的方式，允许应用程序通过消息进行异步通信。要设计一个有效的消息队列系统，您需要考虑消息排序、消息持久性和消息路由等因素。

10. 安全
安全是保护系统免受未经授权的访问和恶意攻击的过程。要设计一个安全的系统，您需要考虑身份验证、授权和加密等因素。
-------------------------------------------------------------------------------------

没有一场战役是按计划打赢的，但也没有一场战役是不按计划打赢的
