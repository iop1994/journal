ECMAScript中所有的函数的参数都是按值传递的。例如：
  引用类型传入的参数是该对象变量的引用地址
  let obj = {};
  function changeValue(obj){
    //obj是一个局部变量，接收到的值是引用地址
    obj.name = 'ConardLi';
    obj = {name:'code秘密花园'};
  }
  changeValue(obj);
  console.log(obj.name); // ConardLi

NaN和其他任何类型比较永远返回false(包括和他自己)。例子：
  NaN == NaN // false
  
typeof
  适用场景
  typeof操作符可以准确判断一个变量的 原始类型 和 函数类型
    typeof 'ConardLi'  // string
    typeof 123  // number
    typeof true  // boolean
    typeof Symbol()  // symbol
    typeof undefined  // undefined
    typeof function(){}  // function
    
  不适用场景
   除函数外所有的引用类型都会被判定为object
      typeof [] // object
      typeof {} // object
      typeof new Date() // object
      typeof /^\d*$/; // object
  
  instanceof操作符可以帮助我们判断引用类型具体是什么类型的对象(原型)，但使用instanceof也不能检测基本数据类型
  
  每一个引用类型都有toString方法，默认情况下，toString()方法被每个Object对象继承。
      如果此方法在自定义对象中未被覆盖，toString() 返回 "[object type]"，其中type是对象的类型
    Object.prototype.toString.call(对象变量)
  这是一个十分常见的问题，用 typeof 是否能准确判断一个对象变量，答案是否定的，null 的结果也是 object，数组的结果也是 object，有时候我们需要的是 "纯粹" 的 object 对象。如何避免呢？比较好的方式是：
  (注：原型链上没覆写toString方法)
  var obj = {}
  console.log(Object.prototype.toString.call(obj) === "[object Object]");

