在函数内调用外部变量（引用了自由变量的函数），高阶函数？？？
声明新函数时，将其赋值给变量，都会存储函数定义和闭包（作用域）。返回的函数可以访问不属于全局作用域的变量，但它们仅存在于其闭包中。
闭包包含在函数创建时作用域中的所有变量，它类似于背包。函数定义附带一个小背包，它的包中存储了函数定义创建时作用域中的所有变量。

在全局作用域中创建的函数创建闭包，但是由于这些函数是在全局作用域中创建的，所以它们可以访问全局作用域中的所有变量，闭包的概念并不重要。

当一个函数被创建并传递或从另一个函数返回时，它会携带一个背包。背包中是函数声明时作用域内的所有变量。

JavaScript的一个复杂之处在于它如何查找变量，如果在函数执行上下文中找不到变量，它将在调用上下文中寻找它，如果在它的调用上下文中没有找到，就一直往上一级，直到它在全局执行上下文中查找为止  
变量寻找和作用域以及函数定义时的执行上下文相关联
