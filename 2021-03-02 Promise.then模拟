
function Promise(fn_executor) {
    var fn_onResolve_ = null
    var onReject_ = null

    this.then = function (fn_onResolve, onReject) {
        onResolve_ = fn_onResolve
    };

    // 执行fn_executor函数，给resolve和reject传参-回调函数
    fn_executor(
        (value) => {
            //Promise的延迟绑定，要不然会报“fn_onResolve_ is not a function“的错误
            // 真正的Promise执行是微任务，setTimeout模拟执行是宏任务
            setTimeout(() => {
                fn_onResolve_(value)
            }, 0)
        },
        null
    );
}

//resolve和reject触发微任务
new Promise((fn_resolve, fn_reject) => { fn_resolve(100) }).then(res => {

})
----------------------------------------------------------------------
//极简的实现
class Promise {
    callbacks = [];
    constructor(fn) {
        // 绑定完就直接执行
        fn(this._resolve.bind(this));
    }
    then(onFulfilled) {
        this.callbacks.push(onFulfilled);
    }
    _resolve(value) {
        this.callbacks.forEach(fn => fn(value));
    }
}

//Promise应用
// resolve参数赋值成 class Promise的  _resolve
// resolve参数调用时，_resolve方法的循环的fn参数就是then回调注册的函数
let p = new Promise(resolve => {
    setTimeout(() => {
        console.log('done');
        resolve('5秒');
    }, 5000);
}).then((tip) => {
    // 注册到 class Promise的  callback数组
    console.log(tip);
})
